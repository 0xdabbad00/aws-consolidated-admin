
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  KeyAdministratorARNs:
    Type: CommaDelimitedList

  DistBucket:
    Type: String

  AssumeRoleFnVersion:
    Type: String

  CreateStackFnVersion:
    Type: String

  UpdateStackFnVersion:
    Type: String

  DeleteStackFnVersion:
    Type: String

  DescribeStackFnVersion:
    Type: String

  StartWorkflowsFnVersion:
    Type: String

  GetWorkflowStatusesFnVersion:
    Type: String

  SNSNotificationHandlerFnVersion:
    Type: String

  EnrollAccountFnVersion:
    Type: String

  # CloudTrail lifecycle

  CloudTrailLifecycleEnabled:
    Type: String
    Default: Disabled
    Description: When enabled, CloudTrail logs will be first moved to Glacier and then deleted after a period of time
    AllowedValues: ["Enabled", "Disabled"]

  CloudTrailDaysToGlacier:
    Type: Number
    Description: Days before CloudTrail logs are moved to Glacier
    Default: 365

  CloudTrailDaysToDelete:
    Type: Number
    Description: Days before CloudTrail logs are deleted
    Default: 731

  # Config lifecycle

  ConfigLifecycleEnabled:
    Type: String
    Default: Disabled
    Description: When enabled, AWS Config snapshots will be first moved to Glacier and then deleted after a period of time
    AllowedValues: ["Enabled", "Disabled"]

  ConfigDaysToGlacier:
    Type: Number
    Description: Days before AWS Config snapshots are moved to Glacier
    Default: 365

  ConfigDaysToDelete:
    Type: Number
    Description: Days before AWS Config snapshots are deleted
    Default: 731

Resources:
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: SupervisorKeyPolicy
        Statement:
          -
            Sid: Enable IAM user permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          -
            Sid: Access for key administrators
            Effect: Allow
            Principal:
              AWS: !Ref KeyAdministratorARNs
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:Encrypt*
            Resource: '*'
          -
            Sid: Allow encryption with the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt AssumeRoleFnExecutionRole.Arn
            Action:
              - kms:Encrypt*
            Resource: '*'
          -
            Sid: Allow decryption with the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CfnFnExecutionRole.Arn
            Action:
              - kms:Decrypt*
            Resource: '*'

  KMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/cfn/${AWS::StackName}'
      TargetKeyId: !Ref KMSKey

  AllowSupervisedAccountAssumeRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            NotResource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'

  AssumeRoleFnExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref AllowSupervisedAccountAssumeRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  CfnFnExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  WorkflowMgmtFnExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  AssumeRoleFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: assume_role.lambda_handler
      Runtime: python2.7
      Role: !GetAtt AssumeRoleFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: assume_role.zip
        S3ObjectVersion: !Ref AssumeRoleFnVersion
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyAlias

  CreateStackFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: create_stack.lambda_handler
      Runtime: python2.7
      Role: !GetAtt CfnFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: create_stack.zip
        S3ObjectVersion: !Ref CreateStackFnVersion
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyAlias

  UpdateStackFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: update_stack.lambda_handler
      Runtime: python2.7
      Role: !GetAtt CfnFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: update_stack.zip
        S3ObjectVersion: !Ref UpdateStackFnVersion
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyAlias

  DeleteStackFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: delete_stack.lambda_handler
      Runtime: python2.7
      Role: !GetAtt CfnFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: delete_stack.zip
        S3ObjectVersion: !Ref DeleteStackFnVersion
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyAlias

  DescribeStackFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: describe_stack.lambda_handler
      Runtime: python2.7
      Role: !GetAtt CfnFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: describe_stack.zip
        S3ObjectVersion: !Ref DescribeStackFnVersion
      Environment:
        Variables:
          KMS_KEY_ID: !Ref KMSKeyAlias

  StartWorkflowsFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: start_workflows.lambda_handler
      Runtime: python2.7
      Role: !GetAtt WorkflowMgmtFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: start_workflows.zip
        S3ObjectVersion: !Ref StartWorkflowsFnVersion

  GetWorkflowStatusesFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: get_workflow_statuses.lambda_handler
      Runtime: python2.7
      Role: !GetAtt WorkflowMgmtFnExecutionRole.Arn
      Timeout: 60
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: get_workflow_statuses.zip
        S3ObjectVersion: !Ref GetWorkflowStatusesFnVersion

  StateMachineCustomResourcePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !GetAtt DeployTemplateStateMachineExecutionRole.Arn
              - !GetAtt ParallelExecutionStateMachineExecutionRole.Arn
              - !GetAtt CloudWatchEventsHandlerStateMachineExecutionRole.Arn
              - !GetAtt ConfigNotificationHandlerStateMachineExecutionRole.Arn
              - !GetAtt CloudTrailNotificationHandlerStateMachineExecutionRole.Arn

  StateMachineCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - !Ref StateMachineCustomResourcePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  StateMachineCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt StateMachineCustomResourceRole.Arn
      Code:
        ZipFile: |
          import base64
          import boto3
          import botocore
          import cfnresponse
          import json
          import os

          sfn = boto3.client('stepfunctions')

          int_fields = {'Seconds', 'IntervalSeconds', 'MaxAttempts', 'BackoffRate',
                        'TimeoutSeconds', 'HeartbeatSeconds', 'NumericEquals',
                        'NumericLessThan', 'NumericGreaterThan',
                        'NumericLessThanEquals', 'NumericGreaterThanEquals'}

          float_fields = set()

          bool_fields = {'BooleanEquals', 'End'}

          def fix_types(obj):
              for k, v in obj.iteritems():
                  if k in int_fields:
                      obj[k] = int(v)
                  elif k in float_fields:
                      obj[k] = float(v)
                  elif k in bool_fields:
                      obj[k] = v.lower() == 'true'
                  elif type(v) is dict:
                      fix_types(v)

          def handler(event, context):
              print event

              responseData = {}

              try:
                  if event['RequestType'] in ('Create', 'Update'):
                      defn = event['ResourceProperties']['Definition']
                      fix_types(defn)
                      defn_json = json.dumps(defn)
                      print "DEFINITION: " + defn_json

                      name = event['LogicalResourceId'] + '-' + base64.b32encode(os.urandom(5))
                      resp = sfn.create_state_machine(
                          name=name,
                          roleArn=event['ResourceProperties']['RoleARN'],
                          definition=defn_json)

                      responseData['Arn'] = resp['stateMachineArn']
                      cfnresponse.send(event, context, cfnresponse.SUCCESS,
                                       responseData, resp['stateMachineArn'])
                  else:
                      if event['PhysicalResourceId'] != '':
                          try:
                              sfn.delete_state_machine(
                                  stateMachineArn=event['PhysicalResourceId'])
                          except botocore.exceptions.ClientError as e:
                              print e.message

                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData,
                                       event['PhysicalResourceId'])

              except Exception as e:
                  print e.message
                  cfnresponse.send(event, context, cfnresponse.FAILED, responseData,
                                   event.get('PhysicalResourceId'))

  DeployTemplateStateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt AssumeRoleFn.Arn
              - !GetAtt CreateStackFn.Arn
              - !GetAtt UpdateStackFn.Arn
              - !GetAtt DeleteStackFn.Arn
              - !GetAtt DescribeStackFn.Arn

  DeployTemplateStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Ref DeployTemplateStateMachineExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - sts:AssumeRole

  DeployTemplateStateMachine:
    Type: Custom::StateMachine
    Properties:
      ServiceToken: !GetAtt StateMachineCustomResource.Arn
      Name: DeployTemplate
      RoleARN: !GetAtt DeployTemplateStateMachineExecutionRole.Arn
      Definition:
        Comment: Deploys a CloudFormation template
        StartAt: AssumeRole
        States:
          AssumeRole:
            Type: Task
            Resource: !GetAtt AssumeRoleFn.Arn
            ResultPath: "$.Credentials"
            Next: GetExistingStack

          GetExistingStack:
            Type: Task
            Resource: !GetAtt DescribeStackFn.Arn
            ResultPath: "$.Stack"
            Next: ChooseStackAction

          ChooseStackAction:
            Type: Choice
            Choices:
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: DOES_NOT_EXIST
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: DELETE_COMPLETE
                Next: CreateStack
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: CREATE_COMPLETE
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_COMPLETE
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_ROLLBACK_COMPLETE
                Next: UpdateStack
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: CREATE_FAILED
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: ROLLBACK_COMPLETE
                Next: CleanupOldStack
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: DELETE_IN_PROGRESS
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: ROLLBACK_IN_PROGRESS
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_COMPLETE_CLEANUP_IN_PROGRESS
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_ROLLBACK_IN_PROGRESS
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS
                Next: WaitBeforeProceed
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: CREATE_IN_PROGRESS
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_IN_PROGRESS
                Next: StackInUse
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: ROLLBACK_FAILED
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: DELETE_FAILED
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_ROLLBACK_FAILED
                Next: StackBroken

          CleanupOldStack:
            Type: Task
            Resource: !GetAtt DeleteStackFn.Arn
            # We don't need this, but cfn won't let us put null here
            ResultPath: '$.DeleteResponse'
            Next: WaitBeforeProceed

          WaitBeforeProceed:
            Type: Wait
            Seconds: 15
            Next: ChooseStackAction

          CreateStack:
            Type: Task
            Resource: !GetAtt CreateStackFn.Arn
            ResultPath: "$.Stack"
            Next: WaitForCreateUpdate

          UpdateStack:
            Type: Task
            Resource: !GetAtt UpdateStackFn.Arn
            ResultPath: "$.Stack"
            Next: WasUpdateNecessary

          GetStackStatus:
            Type: Task
            Resource: !GetAtt DescribeStackFn.Arn
            ResultPath: "$.Stack"
            Next: IsStackDoneMutating

          IsStackDoneMutating:
            Type: Choice
            Default: WaitForCreateUpdate
            Choices:
              -
                Or:
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: CREATE_COMPLETE
                  -
                    Variable: "$.Stack.StackStatus"
                    StringEquals: UPDATE_COMPLETE
                Next: DeploymentSucceeded
              -
                Variable: "$.Stack.StackStatus"
                StringEquals: CREATE_FAILED
                Next: DeleteStack
              -
                Variable: "$.Stack.StackStatus"
                StringEquals: UPDATE_ROLLBACK_COMPLETE
                Next: UpdateFailed

          WasUpdateNecessary:
            Type: Choice
            Default: WaitForCreateUpdate
            Choices:
              - Variable: "$.Stack.Warning"
                StringEquals: NOTHING_TO_UPDATE
                Next: DeploymentSucceeded

          WaitForCreateUpdate:
            Type: Wait
            Seconds: 15
            Next: GetStackStatus

          DeleteStack:
            Type: Task
            Resource: !GetAtt DeleteStackFn.Arn
            # We don't need this, but cfn won't let us put null here
            ResultPath: '$.DeleteResponse'
            Next: WaitForDelete

          WaitForDelete:
            Type: Wait
            Seconds: 15
            Next: GetStackDeletionStatus

          GetStackDeletionStatus:
            Type: Task
            Resource: !GetAtt DescribeStackFn.Arn
            ResultPath: "$.Stack"
            Next: IsStackDoneDeleting

          IsStackDoneDeleting:
            Type: Choice
            Default: WaitForDelete
            Choices:
              - Variable: "$.Stack.StackStatus"
                StringEquals: DELETE_COMPLETE
                Next: CreateFailed

          CreateFailed:
            Type: Fail
            Error: CreateFailed
            Cause: Creating the stack failed

          UpdateFailed:
            Type: Fail
            Error: UpdateFailed
            Cause: Updating the stack failed

          StackBroken:
            Type: Fail
            Error: StackBroken
            Cause: The stack is broken. Please manually remediate.

          StackInUse:
            Type: Fail
            Error: StackInUse
            Cause: The stack is in use. Please wait for existing workflows to complete.

          DeploymentSucceeded:
            Type: Pass
            End: true

  ParallelExecutionStateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !GetAtt AssumeRoleFn.Arn
              - !GetAtt StartWorkflowsFn.Arn
              - !GetAtt GetWorkflowStatusesFn.Arn

  ParallelExecutionStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Ref ParallelExecutionStateMachineExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - sts:AssumeRole

  ParallelExecutionStateMachine:
    Type: Custom::StateMachine
    Properties:
      ServiceToken: !GetAtt StateMachineCustomResource.Arn
      Name: ParallelExecution
      RoleARN: !GetAtt ParallelExecutionStateMachineExecutionRole.Arn
      Definition:
        Comment: Execute multiple workflows in parallel
        StartAt: StartWorkflows
        States:
          StartWorkflows:
            Type: Task
            Resource: !GetAtt StartWorkflowsFn.Arn
            ResultPath: '$.Workflows'
            Next: WaitForWorkflows

          WaitForWorkflows:
            Type: Wait
            Seconds: 30
            Next: GetWorkflowStatuses

          GetWorkflowStatuses:
            Type: Task
            Resource: !GetAtt GetWorkflowStatusesFn.Arn
            Next: HaveWorkflowsCompleted

          HaveWorkflowsCompleted:
            Type: Choice
            Default: WaitForWorkflows
            Choices:
              -
                Variable: '$.Status'
                StringEquals: SUCCEEDED
                Next: DeploymentSucceeded
              -
                Variable: '$.Status'
                StringEquals: FAILED
                Next: DeploymentFailed

          DeploymentSucceeded:
            Type: Pass
            End: true

          DeploymentFailed:
            Type: Fail
            Error: DeploymentFailed
            Cause: The deployment failed

  ##############
  # CloudTrail #
  ##############

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cloudtrail-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CloudTrailLifecycle
            ExpirationInDays: !Ref CloudTrailDaysToDelete
            Status: !Ref CloudTrailLifecycleEnabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: !Ref CloudTrailDaysToGlacier
      Tags:
        - { Key: Environment, Value: security }

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub 'arn:aws:s3:::${CloudTrailBucket}'
          -
            Sid: PutObject
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      S3BucketName: !Ref CloudTrailBucket
      Tags:
        - { Key: Environment, Value: security }

  ##########
  # Config #
  ##########

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'config-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ConfigLifecycle
            ExpirationInDays: !Ref ConfigDaysToDelete
            Status: !Ref ConfigLifecycleEnabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: !Ref ConfigDaysToGlacier
      Tags:
        - { Key: Environment, Value: security }

  ConfigBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub 'arn:aws:s3:::${ConfigBucket}'
          -
            Sid: PutObject
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  ConfigPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringLike:
                s3:x-amz-acl: bucket-owner-full-control
          -
            Effect: Allow
            Action:
              - s3:GetBucketAcl
            Resource:
              - !Sub 'arn:aws:s3:::${ConfigBucket}'
          # -
          #   Effect: Allow
          #   Action:
          #     - sns:Publish
          #   Resource: !Ref ConfigSNSTopic

  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
        - !Ref ConfigPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: config.amazonaws.com
            Action:
              - sts:AssumeRole

  ###############################################
  # CloudTrail data event selectors for buckets #
  ###############################################

  CloudTrailEventSelectorCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCloudTrailFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  CloudTrailEventSelectorCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt CloudTrailEventSelectorCustomResourceRole.Arn
      Code:
        ZipFile: |
          import boto3
          import copy
          import cfnresponse

          cloudtrail = boto3.client('cloudtrail')

          # Convert the API's representation of event selectors into something
          # more manageable by converting lists with unique keys into dicts
          def parse_event_selectors(source_event_selectors):
              event_selectors = {}
              for selector in copy.deepcopy(source_event_selectors):
                  event_selectors[selector.pop('ReadWriteType')] = selector
                  for data_resource in selector.pop('DataResources'):
                      type_ = data_resource['Type']
                      values = data_resource['Values']
                      selector.setdefault('DataResources', {})[type_] = set(values)

              return event_selectors

          # Convert from our representation of event selectors back into the
          # API's representation
          def format_event_selectors(event_selectors):
              resp = []
              for rwtype, es in event_selectors.iteritems():
                  es['ReadWriteType'] = rwtype
                  es['DataResources'] = [
                      { 'Type': k, 'Values': list(v) } for k, v in
                      es.pop('DataResources', {}).iteritems()]

                  if len(es['DataResources']) > 0 or es['IncludeManagementEvents']:
                      resp.append(es)
              return resp

          def mutate_selectors(existing_selectors, defined_selectors, delete=False):
              for rwtype, defined_selector in defined_selectors.iteritems():
                  selector = existing_selectors.setdefault(
                      rwtype, {'IncludeManagementEvents': False})

                  for type_, values in defined_selector.iteritems():
                      resource_values = (selector
                                         .setdefault('DataResources', {})
                                         .setdefault(type_, set()))

                      if delete:
                          resource_values.difference_update(set(values))
                      else:
                          resource_values.update(set(values))

          def mutate_management_event_selector(existing_selectors, mgmt_rw_type):
              # Reset all IncludeManagementEvents flags
              for _, selector in existing_selectors.iteritems():
                  selector['IncludeManagementEvents'] = False

              existing_selectors.setdefault(
                  mgmt_rw_type, {})['IncludeManagementEvents'] = True

          def modify_event_selectors(request_type, props, old_props=None):
              resp = cloudtrail.get_event_selectors(TrailName=props['TrailName'])
              selectors = parse_event_selectors(resp['EventSelectors'])

              if request_type == 'Delete':
                  mutate_selectors(selectors, props['DataEventSelectors'], True)
              else:
                  if request_type == 'Update':
                      mutate_selectors(selectors, old_props['DataEventSelectors'], True)

                  mutate_selectors(selectors, props['DataEventSelectors'])

              try:
                  mutate_management_event_selector(
                      selectors, props['ManagementEventReadWriteType'])
              except KeyError:
                  pass

              new_selectors = format_event_selectors(selectors)
              print new_selectors

              cloudtrail.put_event_selectors(
                  TrailName=props['TrailName'], EventSelectors=new_selectors)

          def handler(event, context):
              print event

              try:
                  modify_event_selectors(
                      event['RequestType'],
                      event['ResourceProperties'],
                      event.get('OldResourceProperties'))
              except Exception as e:
                  print e.message
                  response_code = cfnresponse.FAILED
              else:
                  response_code = cfnresponse.SUCCESS

              cfnresponse.send(event, context, response_code, {},
                               event['ResourceProperties']['TrailName'])

  CloudTrailEventSelectors:
    Type: Custom::CloudTrailEventSelector
    Properties:
      ServiceToken: !GetAtt CloudTrailEventSelectorCustomResource.Arn
      TrailName: !Ref CloudTrail
      ManagementEventReadWriteType: All
      DataEventSelectors:
        All:
          'AWS::S3::Object':
            - !Sub 'arn:aws:s3:::${CloudTrailBucket}/'
            - !Sub 'arn:aws:s3:::${ConfigBucket}/'


  #
  # SNS Delivery API Endpoint
  # (Dirty hack for cross-region SNS notifications)
  #

  # SNSNotificationHandlerExecutionPolicy:
  #   Type: AWS::IAM::ManagedPolicy
  #   Properties:
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - ???
  #           Resource:
  #             - ???

  SNSNotificationHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        # - !Ref SNSNotificationHandlerExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  SNSNotificationHandlerFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: sns_notification_handler.lambda_handler
      Runtime: python2.7
      Role: !GetAtt SNSNotificationHandlerExecutionRole.Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: sns_notification_handler.zip
        S3ObjectVersion: !Ref SNSNotificationHandlerFnVersion

  SNSNotificationAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        swagger: 2.0
        info:
          version: 2017-02-11
          title: SNSNotificationDelivery
        paths:
          /events:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SNSNotificationHandlerFn}/invocations'
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
          /config:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SNSNotificationHandlerFn}/invocations'
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200
          /cloudtrail:
            post:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                "200":
                  description: 200 response
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${SNSNotificationHandlerFn}/invocations'
                httpMethod: POST
                responses:
                  default:
                    statusCode: 200


  SNSNotificationAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref SNSNotificationAPI
      Description: Initial deployment
      StageName: prod

  SNSNotificationHandlerFnPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref SNSNotificationHandlerFn
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SNSNotificationAPI}/*/POST/event

  ##############################
  # Managed account enrollment #
  ##############################

  AccountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: AccountID
          AttributeType: S
      KeySchema:
        - AttributeName: AccountID
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: accounts

  EnrollAccountFnPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - ec2:DescribeRegions
            Resource: '*'
          -
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:GetBucketPolicy
              - s3:PutBucketPolicy
            Resource:
              - !Sub 'arn:aws:s3:::${DistBucket}'
              - !Sub 'arn:aws:s3:::${CloudTrailBucket}'
              - !Sub 'arn:aws:s3:::${ConfigBucket}'

  EnrollAccountFnRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - !Ref EnrollAccountFnPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  EnrollAccountFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: enroll_account.lambda_handler
      Runtime: python2.7
      Role: !GetAtt EnrollAccountFnRole.Arn
      Timeout: 30
      Code:
        S3Bucket: !Ref DistBucket
        S3Key: enroll_account.zip
        S3ObjectVersion: !Ref EnrollAccountFnVersion
      Environment:
        Variables:
          CLOUDTRAIL_BUCKET: !Ref CloudTrailBucket
          CONFIG_BUCKET: !Ref ConfigBucket
          DIST_BUCKET: !Ref DistBucket
          ACCOUNT_TABLE: !Ref AccountTable
          DEPLOY_TEMPLATE_STATE_MACHINE_ARN: !GetAtt DeployTemplateStateMachine.Arn
          PARALLEL_EXECUTION_STATE_MACHINE_ARN: !GetAtt ParallelExecutionStateMachine.Arn
          EVENTS_SNS_NOTIFICATION_URL: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/events'
          CLOUDTRAIL_SNS_NOTIFICATION_URL: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/cloudtrail'
          CONFIG_SNS_NOTIFICATION_URL: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/config'
          STACK_NAME: Baseline
          TEMPLATE_FILE_NAME: target.yaml
          MANAGEMENT_ACCOUNT_ID: !Ref 'AWS::AccountId'

  ##############################
  # Distribution bucket policy #
  ##############################

  DistBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DistBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Sid: GetObject
            Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${DistBucket}/*'

  ###########################################
  # CloudWatch Events handler state machine #
  ###########################################

  CloudWatchEventsHandlerStateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'

  CloudWatchEventsHandlerStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Ref CloudWatchEventsHandlerStateMachineExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - sts:AssumeRole

  CloudWatchEventsHandlerStateMachine:
    Type: Custom::StateMachine
    Properties:
      ServiceToken: !GetAtt StateMachineCustomResource.Arn
      Name: CloudWatchEventsHandler
      RoleARN: !GetAtt CloudWatchEventsHandlerStateMachineExecutionRole.Arn
      Definition:
        Comment: Handle a CloudWatch Events notification
        StartAt: ChooseSource
        States:
          ChooseSource:
            Type: Choice
            Default: NotHandled
            Choices:
              -
                Variable: '$.source'
                StringEquals: aws.autoscaling
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.codedeploy
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.ec2
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.ecs
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.events
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.health
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.kms
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.s3
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.signin
                Next: NotHandled
              -
                Variable: '$.source'
                StringEquals: aws.ssm
                Next: NotHandled

          NotHandled:
            Type: Pass
            End: true

  #############################################
  # Config notification handler state machine #
  #############################################

  ConfigNotificationHandlerStateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'

  ConfigNotificationHandlerStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Ref ConfigNotificationHandlerStateMachineExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - sts:AssumeRole

  ConfigNotificationHandlerStateMachine:
    Type: Custom::StateMachine
    Properties:
      ServiceToken: !GetAtt StateMachineCustomResource.Arn
      Name: ConfigNotificationHandler
      RoleARN: !GetAtt ConfigNotificationHandlerStateMachineExecutionRole.Arn
      Definition:
        Comment: Handle an AWS Config notification
        StartAt: ChooseHandler
        States:
          ChooseHandler:
            Type: Choice
            Default: NotHandled
            Choices:
              -
                Variable: '$.messageType'
                StringEquals: ConfigurationItemChangeNotification
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: ConfigurationHistoryDeliveryCompleted
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: ConfigurationSnapshotDeliveryStarted
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: ConfigurationSnapshotDeliveryCompleted
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: ComplianceChangeNotification
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: ConfigRulesEvaluationStarted
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: OversizedConfigurationItemChangeNotification
                Next: NotHandled
              -
                Variable: '$.messageType'
                StringEquals: OversizedConfigurationItemChangeDeliveryFailed
                Next: NotHandled

          NotHandled:
            Type: Pass
            End: true

  #################################################
  # CloudTrail notification handler state machine #
  #################################################

  CloudTrailNotificationHandlerStateMachineExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'

  CloudTrailNotificationHandlerStateMachineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - !Ref DeployTemplateStateMachineExecutionPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'states.${AWS::Region}.amazonaws.com'
            Action:
              - sts:AssumeRole

  CloudTrailNotificationHandlerStateMachine:
    Type: Custom::StateMachine
    Properties:
      ServiceToken: !GetAtt StateMachineCustomResource.Arn
      Name: CloudTrailNotificationHandler
      RoleARN: !GetAtt CloudTrailNotificationHandlerStateMachineExecutionRole.Arn
      Definition:
        Comment: Handle an AWS CloudTrail delivery notification
        StartAt: NotHandled
        States:
          NotHandled:
            Type: Pass
            End: true

Outputs:
  CloudTrailBucket:
    Value: !Ref CloudTrailBucket
    Export:
      Name: 'CloudTrail:Bucket'

  ConfigBucket:
    Value: !Ref ConfigBucket
    Export:
      Name: 'Config:Bucket'

  EventsSNSNotificationURL:
    Value: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/events'
    Export:
      Name: EventsSNSNotificationURL

  CloudTrailSNSNotificationURL:
    Value: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/cloudtrail'
    Export:
      Name: CloudTrailSNSNotificationURL

  ConfigSNSNotificationURL:
    Value: !Sub 'https://${SNSNotificationAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/config'
    Export:
      Name: ConfigSNSNotificationURL

  EnrollAccountFnName:
    Value: !Ref EnrollAccountFn
    Export:
      Name: 'EnrollAccountFnName'
