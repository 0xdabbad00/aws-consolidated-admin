---
AWSTemplateFormatVersion: "2010-09-09"
Description: IAM Users

Parameters:
  BaselineSecurityNameParameter:
    Type: String
    Description: Name of Baseline Security CloudFormation Stack

Mappings:

# Account Mappings

  AWSAccounts:
    Main:
      AccountID: "123456789012"
    VerticaEC2:
      AccountID: "123456789013"
    Digital:
      AccountID: "123456789014"
    Vintage:
      AccountID: "123456789015"
    GreenLabsAWS:
      AccountID: "123456789016"
    Simian:
      AccountID: "123456789017"
    NewCloud:
      AccountID: "098765432112"
    ABCAWS:
      AccountID: "098765432134"
    LOLAWS:
      AccountID: "098765432135"
    TD105:
      AccountID: "098765432136"
    AWSBills:
      AccountID: "098765432137"
    AWSPeople:
      AccountID: "098765432138"
    AWSAcct:
      AccountID: "098765432139"
    Staging:
      AccountID: "098765432111"
    AWSDX:
      AccountID: "098765432112"
    MarketingProd:
      AccountID: "098765432114"
    MarketingDev:
      AccountID: "098765432115"

Resources:

# Managed Policies

  AssumePowerUserRoleStagingWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Staging, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AssumePowerUserRoleNewCloudWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, NewCloud, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AssumePowerUserRoleMainWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Main, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AssumePowerUserRoleVintageWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AssumePowerUserRoleWorkingTeamWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSAcct, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  OnlyAdministratorHFAROWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Main, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, VerticaEC2, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Digital, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, GreenLabsAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Simian, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, NewCloud, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSBills, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSPeople, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSAcct, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Staging, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSDX, AccountID ], "role/Administrator" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, ABCAWS, AccountID ], "role/ReadOnly" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, LOLAWS, AccountID ], "role/ReadOnly" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, TD105, AccountID ], "role/ReadOnly" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  OnlyAdministratorWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Main, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, VerticaEC2, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Digital, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, GreenLabsAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Simian, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, NewCloud, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSBills, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSPeople, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSAcct, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Staging, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSDX, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, ABCAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, LOLAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, TD105, AccountID ], "role/Administrator" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  ApplicationEngineerWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Main, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Digital, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Simian, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, NewCloud, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, AWSPeople, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Staging, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  VerticaReadOnlyWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, ABCAWS, AccountID ], "role/ReadOnly" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, LOLAWS, AccountID ], "role/ReadOnly" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, TD105, AccountID ], "role/ReadOnly" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  VerticaPowerUserWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, ABCAWS, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, LOLAWS, AccountID ], "role/PowerUser" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, TD105, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AssumePowerUserRoleVintageWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource: !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/PowerUser" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

  AndVerticaAdministratorWithMFAPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Resource:
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Main, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, ABCAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, LOLAWS, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, TD105, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, VerticaEC2, AccountID ], "role/Administrator" ] ]
              - !Join [ ":", [ "arn:aws:iam:", !FindInMap [ AWSAccounts, Vintage, AccountID ], "role/Administrator" ] ]
            Action:
              - "sts:AssumeRole"
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true

# IAM Groups

  PowerUserStaging:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserStaging
      ManagedPolicyArns:
        - !Ref AssumePowerUserRoleStagingWithMFAPolicy

  PowerUserNewCloud:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserNewCloud
      ManagedPolicyArns:
        - !Ref AssumePowerUserRoleNewCloudWithMFAPolicy

  PowerUserMain:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserMain
      ManagedPolicyArns:
        - !Ref AssumePowerUserRoleMainWithMFAPolicy

  PowerUserVintage:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserVintage
      ManagedPolicyArns:
        - !Ref AssumePowerUserRoleVintageWithMFAPolicy

  PowerUserVertica:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserVertica
      ManagedPolicyArns:
        - !Ref VerticaPowerUserWithMFAPolicy

  PowerUserWorkingTeam:
    Type: AWS::IAM::Group
    Properties:
      GroupName: PowerUserWorkingTeam
      ManagedPolicyArns:
        - !Ref AssumePowerUserRoleWorkingTeamWithMFAPolicy


  AdministratorandVertica:
    Type: AWS::IAM::Group
    Properties:
      GroupName: AdministratorandVertica
      ManagedPolicyArns:
        - !Ref AndVerticaAdministratorWithMFAPolicy

  SystemsEngineers:
    Type: AWS::IAM::Group
    Properties:
      GroupName: SystemsEngineers
      ManagedPolicyArns:
        - !Ref OnlyAdministratorWithMFAPolicy

  DataEngineers:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DataEngineers
      ManagedPolicyArns:
        - !Ref VerticaReadOnlyWithMFAPolicy

  ApplicationEngineers:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ApplicationEngineers
      ManagedPolicyArns:
        - !Ref ApplicationEngineerWithMFAPolicy

  Contractors:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Contractors
      ManagedPolicyArns:
        - !Ref OnlyAdministratorHFAROWithMFAPolicy



# IAM Users

  leozh:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AdministratorsGroupName"
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: leozh

  wstclair:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref ApplicationEngineers
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: wstclair

  tdurden:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref PowerUserStaging
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: tdurden

  tcook:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AdministratorsGroupName"
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: tcook

  dbrown:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AdministratorsGroupName"
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: dbrown

  agraham:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-BillingUsersGroupName"
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: agraham

  funderwood:
    Type: "AWS::IAM::User"
    Properties:
      Groups:
        - !Ref DataEngineers
        - !Ref PowerUserVertica
        - "Fn::ImportValue":
            "Fn::Sub": "${BaselineSecurityNameParameter}-AllUsersGroupName"
      UserName: funderwood
